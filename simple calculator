import tkinter as tk
from tkinter import ttk

class Calculator:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("Simple Calculator")
        self.window.geometry("250x300")

        # Create entry field for display
        self.display_entry = ttk.Entry(self.window, width=16, font=('Arial', 16), justify='right')
        self.display_entry.grid(row=0, column=0, columnspan=4)

        # Create buttons for digits 0-9
        self.digit_buttons = []
        for i in range(10):
            button = ttk.Button(self.window, text=str(i), command=lambda i=i: self.append_digit(i))
            if i == 0:
                button.grid(row=4, column=0, columnspan=2, sticky='nsew')
            elif i >= 7:
                button.grid(row=3, column=i-7, sticky='nsew')
            elif i >= 4:
                button.grid(row=2, column=i-4, sticky='nsew')
            else:
                button.grid(row=1, column=i-1, sticky='nsew')
            self.digit_buttons.append(button)

        # Create buttons for operators
        self.operator_buttons = []
        operators = ["+", "-", "*", "/"]
        for i, operator in enumerate(operators):
            button = ttk.Button(self.window, text=operator, command=lambda operator=operator: self.append_operator(operator))
            button.grid(row=i+1, column=4, sticky='nsew')
            self.operator_buttons.append(button)

        # Create button for equals
        self.equals_button = ttk.Button(self.window, text="=", command=self.calculate)
        self.equals_button.grid(row=4, column=2, columnspan=2, sticky='nsew')

        # Create button for clear
        self.clear_button = ttk.Button(self.window, text="C", command=self.clear)
        self.clear_button.grid(row=0, column=4, sticky='nsew')

        # Adjust row and column weights to make the layout responsive
        for i in range(5):
            self.window.grid_rowconfigure(i, weight=1)
            self.window.grid_columnconfigure(i, weight=1)

        # Create a stack to store the operands and operators
        self.stack = []

    def append_digit(self, digit):
        current_text = self.display_entry.get()
        new_text = current_text + str(digit)
        self.display_entry.delete(0, tk.END)
        self.display_entry.insert(0, new_text)

    def append_operator(self, operator):
        current_text = self.display_entry.get()
        new_text = current_text + operator
        self.display_entry.delete(0, tk.END)
        self.display_entry.insert(0, new_text)

    def calculate(self):
        expression = self.display_entry.get()
        try:
            # Parse the expression into a list of operands and operators
            tokens = self.parse_expression(expression)

            # Evaluate the expression using the stack
            result = self.evaluate_expression(tokens)

            self.display_entry.delete(0, tk.END)
            self.display_entry.insert(0, str(result))
        except Exception as e:
            self.display_entry.delete(0, tk.END)
            self.display_entry.insert(0, "Error")

    def parse_expression(self, expression):
        tokens = []
        current_operand = ""
        for char in expression:
            if char.isdigit():
                current_operand += char
            else:
                tokens.append(int(current_operand))
                tokens.append(char)
                current_operand = ""
        tokens.append(int(current_operand))
        return tokens

    def evaluate_expression(self, tokens):
        result = tokens[0]
        for i in range(1, len(tokens), 2):
            operator = tokens[i]
            operand = tokens[i+1]
            if operator == "+":
                result += operand
            elif operator == "-":
                result -= operand
            elif operator == "*":
                result *= operand
            elif operator == "/":
                if operand != 0:
                    result /= operand
                else:
                    raise ZeroDivisionError
        return result

    def clear(self):
        self.display_entry.delete(0, tk.END)
        self.stack = []

    def run(self):
        self.window.mainloop()

if __name__ == "__main__":
    calculator = Calculator()
    calculator.run()
